{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! \u00b6 Substitute Variables (subvars) is a small utility which provides a way to render any Go templates from command line recognizing the object being passed in and drawing attributes from the object to create wanted text. It is very useful for template driven configuration files. It uses sprig v3 for template functions which provides additional functions apart from standard library. Reading and Rednering \u00b6 subvars [ global options ] command [ command options ] [ arguments... ] Directory dir subcommand lets you render all files in a folder & subfolder, and writes the output to stdout . you can also set an output folder where rendered files will be saved insted of stdout with --outdir flag. The filename will be same. If the folder does not exists it will be created automatically. subvars reads the template directly from stdin Renderd output will be written to stdout See the Usage example for details.","title":"Home"},{"location":"#welcome","text":"Substitute Variables (subvars) is a small utility which provides a way to render any Go templates from command line recognizing the object being passed in and drawing attributes from the object to create wanted text. It is very useful for template driven configuration files. It uses sprig v3 for template functions which provides additional functions apart from standard library.","title":"Welcome!"},{"location":"#reading-and-rednering","text":"subvars [ global options ] command [ command options ] [ arguments... ] Directory dir subcommand lets you render all files in a folder & subfolder, and writes the output to stdout . you can also set an output folder where rendered files will be saved insted of stdout with --outdir flag. The filename will be same. If the folder does not exists it will be created automatically. subvars reads the template directly from stdin Renderd output will be written to stdout See the Usage example for details.","title":"Reading and Rednering"},{"location":"01-installation/","text":"Installation \u00b6 MacOS & Linux Homebrew \u00b6 brew install kha7iq/tap/subvars Linux Binary \u00b6 export SUBVARS_VERSION = \"0.1.0\" wget -q https://github.com/kha7iq/subvars/releases/download/v ${ SUBVARS_VERSION } /subvars_Darwin_x86_64.tar.gz tar -xf subvars_Darwin_x86_64.tar.gz chmod +x subvars sudo mv subvars /usr/local/bin/subvars Go Get \u00b6 go get -u github.com/kha7iq/subvars Windows \u00b6 scoop bucket add subvars https :// github . com / kha7iq / scoop-bucket . git scoop install subvars Alternatively you can head over to release pages and download the binary for windows & all other supported platforms. Docker \u00b6 Docker container is also available. latest tage will always pull the latest version avaialbe, you can also download specific version. Checkout release page for available versions. Running Container \u00b6 docker pull khaliq/subvars:latest docker run -it --rm khaliq/subvars:latest --help","title":"Installation"},{"location":"01-installation/#installation","text":"","title":"Installation"},{"location":"01-installation/#macos-linux-homebrew","text":"brew install kha7iq/tap/subvars","title":"MacOS &amp; Linux Homebrew"},{"location":"01-installation/#linux-binary","text":"export SUBVARS_VERSION = \"0.1.0\" wget -q https://github.com/kha7iq/subvars/releases/download/v ${ SUBVARS_VERSION } /subvars_Darwin_x86_64.tar.gz tar -xf subvars_Darwin_x86_64.tar.gz chmod +x subvars sudo mv subvars /usr/local/bin/subvars","title":"Linux Binary"},{"location":"01-installation/#go-get","text":"go get -u github.com/kha7iq/subvars","title":"Go Get"},{"location":"01-installation/#windows","text":"scoop bucket add subvars https :// github . com / kha7iq / scoop-bucket . git scoop install subvars Alternatively you can head over to release pages and download the binary for windows & all other supported platforms.","title":"Windows"},{"location":"01-installation/#docker","text":"Docker container is also available. latest tage will always pull the latest version avaialbe, you can also download specific version. Checkout release page for available versions.","title":"Docker"},{"location":"01-installation/#running-container","text":"docker pull khaliq/subvars:latest docker run -it --rm khaliq/subvars:latest --help","title":"Running Container"},{"location":"02-configuration/","text":"Configuration \u00b6 subvars [ global options ] command [ command options ] [ arguments... ] subvars dir [ command options ] [ arguments... ] Directory dir subcommand lets you render all files in a folder & subfolder, and writes the output to stdout . you can also set an output folder where rendered files will be saved insted of stdout with --outdir flag. The filename will be same. If the folder does not exists it will be created automatically. subvars reads the template directly from stdin Renderd output will be written to stdout Flags \u00b6 Missing Key \u00b6 If missingkey is unset the default is value is set to invalid , and it follows the default behaviour of the golang template library . Missing keys in the template will be substituted with the string <no value> . If missingkey is set to zero , missing keys will be substituted with zero value of data type (ie: an empty string). If missingkey is set to error , subvars will fail and returns an error to the caller when missing any key. Settings can be changed with --missingkey prefix or by exporting environment variable SUBVARS_MISSINGKEY . Prefix \u00b6 Prefix flag --prefix will match a given prefix pattern of all env variables and render only matching the prefixIt can also be configured by exporting environment variable SUBVARS_PREFIX . For detailed example please check the examples page. Input \u00b6 Input flag --input is available for the subcommand dir , when using subcommand you can specify an input folder containing the template files. It can also be configured by exporting environment variable SUBVARS_INPUTDIR . For detailed example please check the examples page. OutDir \u00b6 Input flag --outdir is available for the subcommand dir , when using subcommand you can specify an out folder where rendered files will be saved. If the folder does not exist it will be created automatically, the ouput filename will remain the same as input templates. This setting can also be configured by exporting environment variable SUBVARS_OUTDIR . For detailed example please check the examples page.","title":"Configuration"},{"location":"02-configuration/#configuration","text":"subvars [ global options ] command [ command options ] [ arguments... ] subvars dir [ command options ] [ arguments... ] Directory dir subcommand lets you render all files in a folder & subfolder, and writes the output to stdout . you can also set an output folder where rendered files will be saved insted of stdout with --outdir flag. The filename will be same. If the folder does not exists it will be created automatically. subvars reads the template directly from stdin Renderd output will be written to stdout","title":"Configuration"},{"location":"02-configuration/#flags","text":"","title":"Flags"},{"location":"02-configuration/#missing-key","text":"If missingkey is unset the default is value is set to invalid , and it follows the default behaviour of the golang template library . Missing keys in the template will be substituted with the string <no value> . If missingkey is set to zero , missing keys will be substituted with zero value of data type (ie: an empty string). If missingkey is set to error , subvars will fail and returns an error to the caller when missing any key. Settings can be changed with --missingkey prefix or by exporting environment variable SUBVARS_MISSINGKEY .","title":"Missing Key"},{"location":"02-configuration/#prefix","text":"Prefix flag --prefix will match a given prefix pattern of all env variables and render only matching the prefixIt can also be configured by exporting environment variable SUBVARS_PREFIX . For detailed example please check the examples page.","title":"Prefix"},{"location":"02-configuration/#input","text":"Input flag --input is available for the subcommand dir , when using subcommand you can specify an input folder containing the template files. It can also be configured by exporting environment variable SUBVARS_INPUTDIR . For detailed example please check the examples page.","title":"Input"},{"location":"02-configuration/#outdir","text":"Input flag --outdir is available for the subcommand dir , when using subcommand you can specify an out folder where rendered files will be saved. If the folder does not exist it will be created automatically, the ouput filename will remain the same as input templates. This setting can also be configured by exporting environment variable SUBVARS_OUTDIR . For detailed example please check the examples page.","title":"OutDir"},{"location":"03-usage-examples/","text":"Usage Examples \u00b6 Several files are available in examples folder you can cd into the folder and test the following cases. CLASS_NAME = nginx subvars < ingress-class.yaml ALERT_THRESHOLD = 2 subvars < prometheus_alert.conf echo \"Hey! {{ .USER | upper }} your home folder is {{ .HOME }}\" | subvars subvars < file.txt > file2.txt subvars dir --input examples --out newdir Template Functions \u00b6 In addition to the standard set of template actions and functions that come with Go, subvars also incorporates [sprig] for additional, commonly used functions. i.e echo \"Hey! {{ .USER | upper }} your home folder is {{ .HOME }}\" | subvars In the example, the username will be converted to upper case letters.","title":"Usage Examples"},{"location":"03-usage-examples/#usage-examples","text":"Several files are available in examples folder you can cd into the folder and test the following cases. CLASS_NAME = nginx subvars < ingress-class.yaml ALERT_THRESHOLD = 2 subvars < prometheus_alert.conf echo \"Hey! {{ .USER | upper }} your home folder is {{ .HOME }}\" | subvars subvars < file.txt > file2.txt subvars dir --input examples --out newdir","title":"Usage Examples"},{"location":"03-usage-examples/#template-functions","text":"In addition to the standard set of template actions and functions that come with Go, subvars also incorporates [sprig] for additional, commonly used functions. i.e echo \"Hey! {{ .USER | upper }} your home folder is {{ .HOME }}\" | subvars In the example, the username will be converted to upper case letters.","title":"Template Functions"},{"location":"contributing/","text":"Contributing to SubVars \u00b6 We want to make contributing to this project as easy and transparent as possible. Project structure \u00b6 cmd - Contains the file and helpers package. dir Content related to folder parsing. helpers Helper functions. Documentation \u00b6 docs - Contains the documentation in Markdown format. home.md Is the main page rendered when docs website is loaded. install.md Contains the installation instructions for different packages. Checking Locally \u00b6 Mkdocs is used for documentation rendering from markdown, you can download the cli and test locally before opening a pull request. Install \u00b6 pip install mkdocs-material pip install mdx_include pip install mkdocs-minify-plugin Serve locally \u00b6 mkdocs serve Commits \u00b6 Commit messages should be well formatted, and to make that \"standardized\", we are using Conventional Commits. <type> [ <scope> ] : <short summary> \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500> Summary in present tense. Not capitalized. No | | period at the end. \u2502 \u2502 \u2502 \u2514\u2500> Scope ( optional ) : eg. common, compiler, authentication, core \u2502 \u2514\u2500> Type: chore, docs, feat, fix, refactor, style, or test. You can follow the documentation on their website . Pull Requests \u00b6 We actively welcome your pull requests. Fork the repo and create your branch from master . If you've added code that should be tested, add tests. If you've changed APIs, update the documentation. Make sure your code lints ( make lint ). Make sure your code is well formatted ( make fmt ). Issues \u00b6 We use GitHub issues to track public bugs. Please ensure your description is clear and has sufficient instructions to be able to reproduce the issue. License \u00b6 By contributing to PingMe, you agree that your contributions will be licensed under the LICENSE file in the root directory of this source tree.","title":"Contributing"},{"location":"contributing/#contributing-to-subvars","text":"We want to make contributing to this project as easy and transparent as possible.","title":"Contributing to SubVars"},{"location":"contributing/#project-structure","text":"cmd - Contains the file and helpers package. dir Content related to folder parsing. helpers Helper functions.","title":"Project structure"},{"location":"contributing/#documentation","text":"docs - Contains the documentation in Markdown format. home.md Is the main page rendered when docs website is loaded. install.md Contains the installation instructions for different packages.","title":"Documentation"},{"location":"contributing/#checking-locally","text":"Mkdocs is used for documentation rendering from markdown, you can download the cli and test locally before opening a pull request.","title":"Checking Locally"},{"location":"contributing/#install","text":"pip install mkdocs-material pip install mdx_include pip install mkdocs-minify-plugin","title":"Install"},{"location":"contributing/#serve-locally","text":"mkdocs serve","title":"Serve locally"},{"location":"contributing/#commits","text":"Commit messages should be well formatted, and to make that \"standardized\", we are using Conventional Commits. <type> [ <scope> ] : <short summary> \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500> Summary in present tense. Not capitalized. No | | period at the end. \u2502 \u2502 \u2502 \u2514\u2500> Scope ( optional ) : eg. common, compiler, authentication, core \u2502 \u2514\u2500> Type: chore, docs, feat, fix, refactor, style, or test. You can follow the documentation on their website .","title":"Commits"},{"location":"contributing/#pull-requests","text":"We actively welcome your pull requests. Fork the repo and create your branch from master . If you've added code that should be tested, add tests. If you've changed APIs, update the documentation. Make sure your code lints ( make lint ). Make sure your code is well formatted ( make fmt ).","title":"Pull Requests"},{"location":"contributing/#issues","text":"We use GitHub issues to track public bugs. Please ensure your description is clear and has sufficient instructions to be able to reproduce the issue.","title":"Issues"},{"location":"contributing/#license","text":"By contributing to PingMe, you agree that your contributions will be licensed under the LICENSE file in the root directory of this source tree.","title":"License"}]}